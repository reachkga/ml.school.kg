AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for IAM User with AssumeRole policy'

Parameters:
  UserName:
    Type: String
    Description: 'User name for the IAM User'
    Default: 'mlschool'


Resources:
  User:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Ref UserName

  UserCredentials:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: !Ref User

  UserCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: '/credentials/mlschool'
      SecretString: !GetAtt UserCredentials.SecretAccessKey

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Service:
              - sagemaker.amazonaws.com
          
      Path: /
      Policies:
        - PolicyName: "mlschool"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "batch:TerminateJob"
                  - "batch:DescribeJobs"
                  - "batch:DescribeJobDefinitions"
                  - "batch:DescribeJobQueues"
                  - "batch:RegisterJobDefinition"
                  - "batch:SubmitJob"
                  - "batch:DescribeComputeEnvironments"
                  - "ecr:DescribeRepositories"
                  - "ecr:CreateRepository"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:DeleteRepository"
                  - "ecr:PutImage"
                  - "events:PutTargets"
                  - "events:DescribeRule"
                  - "events:DisableRule"
                  - "events:PutRule"
                  - "iam:PassRole"
                  - "iam:GetRole"
                  - "sagemaker:ListEndpoints"
                  - "sagemaker:DescribeEndpoint"
                  - "sagemaker:CreateEndpoint"
                  - "sagemaker:UpdateEndpoint"
                  - "sagemaker:DescribeEndpointConfig"
                  - "sagemaker:CreateEndpointConfig"
                  - "sagemaker:DescribeModel"
                  - "sagemaker:CreateModel"
                  - "sagemaker:DeleteEndpoint"
                  - "sagemaker:ListTags"
                  - "sagemaker:AddTags"
                  - "sagemaker:InvokeEndpoint"
                  - "states:ListStateMachines"
                  - "states:DescribeStateMachine"
                  - "states:UpdateStateMachine"
                  - "states:StartExecution"
                  - "states:CreateStateMachine"
                  - "states:ListExecutions"
                  - "states:StopExecution"
                Resource: 
                  - "*"

              - Effect: "Allow"
                Action:
                  - "s3:CreateBucket"
                  - "s3:ListBucket"
                  - "s3:ListAllMyBuckets"
                  - "s3:GetBucketLocation"
                  - "s3:PutObject"
                  - "s3:PutObjectTagging"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource:
                  - "arn:aws:s3:::*"

  UserPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AssumeRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Resource: !GetAtt 'Role.Arn'
      Users: 
        - !Ref User

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic on port 5000
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  RemoteEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.large
      ImageId: aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
      DisableApiTermination: true
      InstanceInitiatedShutdownBehavior: stop
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 128
            VolumeType: gp3
      Tags:
        - Key: Name
          Value: mlschool
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install -y build-essential python3.12-venv zlib1g-dev unzip

          # Create virtual environment
          python3 -m venv /home/ubuntu/.venv

          # Activate virtual environment and install mlflow
          source /home/ubuntu/.venv/bin/activate
          pip install mlflow

          # Create a script to activate the virtual environment on instance start
          cat << EOF > /home/ubuntu/activate_venv.sh
          #!/bin/bash
          source /home/ubuntu/.venv/bin/activate
          EOF

          chmod +x /home/ubuntu/activate_venv.sh

          # Add the activation script to .bashrc to run on instance start
          echo ". /home/ubuntu/activate_venv.sh" >> /home/ubuntu/.bashrc

          # Set ownership of the virtual environment and script to the ubuntu user
          chown -R ubuntu:ubuntu /home/ubuntu/.venv /home/ubuntu/activate_venv.sh

Outputs:
  User:
    Description: 'Name of the user'
    Value: !Ref User

  AccountId:
    Description: 'AWS Account ID'
    Value: !Ref 'AWS::AccountId'

  Region:
    Description: 'AWS Region'
    Value: !Ref 'AWS::Region'
    
  AccessKeyId:
    Description: 'Access Key ID'
    Value: !Ref UserCredentials

  Role:
    Description: 'Amazon Resource Name (ARN) of the role'
    Value: !GetAtt 'Role.Arn'

